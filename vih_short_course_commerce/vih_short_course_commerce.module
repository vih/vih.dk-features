<?php
/**
 * @file
 * Code for the VIH Short Course Commerce feature.
 */

include_once('vih_short_course_commerce.features.inc');

/**
 * Implements hook_commerce_product_type_info().
 */
function vih_short_course_commerce_commerce_product_type_info() {
  return array(
    'vih_short_course' => array(
      'type' => 'vih_short_course',
      'name' => t('Short course'),
      'description' => t('Defines a short course product that users can sign up for.'),
    ),
  );
}

/**
 * Implements hook_commerce_line_item_type_info().
 */
function vih_short_course_commerce_commerce_line_item_type_info() {
  return array(
    'vih_short_course' => array(
      'name' => t('Standard short course'),
      'description' => t('Used for short courses, which no additional information.'),
      'add_form_submit_value' => t('Sign up'),
      'base' => 'commerce_product_line_item',
      'product' => TRUE,
    ),
    'vih_short_course_golf' => array(
      'name' => t('Golf short course'),
      'description' => t('Used for short couses, where you can can select a golf handicap.'),
      'add_form_submit_value' => t('Sign up'),
      'base' => 'commerce_product_line_item',
      'product' => TRUE,
    ),
    'vih_short_course_kayak' => array(
      'name' => t('Kayak short course'),
      'description' => t('Used for short couses, where you can rent a kayak.'),
      'add_form_submit_value' => t('Sign up'),
      'base' => 'commerce_product_line_item',
      'product' => TRUE,
    ),
    'vih_short_course_sport' => array(
      'name' => t('Sport short course'),
      'description' => t('Used for short couses, where you can can select a sport activity.'),
      'add_form_submit_value' => t('Sign up'),
      'base' => 'commerce_product_line_item',
      'product' => TRUE,
    ),
  );
}

/**
 * Implements hook_commerce_price_component_type_info().
 */
function vih_short_course_commerce_commerce_price_component_type_info() {
  return array(
    'vih_kayak_fee' => array(
      'title' => t('Kayak fee'),
      'display_title' => t('Kayak fee'),
      'weight' => -50,
    ),
  );
}

/**
* Implements hook_admin_paths().
*/
function vih_short_course_commerce_admin_paths() {
  $paths = array(
    'node/*/registrations' => TRUE,
    'node/*/registrations/*' => TRUE,    
  );
  return $paths;
}

/**
 * Implementation of hook_form_FORMID_alter().
 */
function vih_short_course_commerce_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state) {

  $form['submit']['#value'] = t('Register');
/*
  $cart_product_ids = vih_short_course_commerce_get_products_in_cart();
  $purchased_product_ids = vih_short_course_commerce_get_users_purchased_products();

  $line_item = $form_state['line_item'];
  $product = commerce_product_load($line_item->commerce_product[LANGUAGE_NONE][0]['product_id']);

  // If this was a contrib module, we'd want to check if the associated registration
  // entity is set to "Allow multiple registrations" for a user instead of just
  // checking whether the product type is "program" as is the case for this specific site
  if ($product->type == 'vih_short_course_golf') {
    // Change the "Add to Cart" button text
    $form['submit']['#value'] = t('Enroll');

    if (in_array($product->product_id, $cart_product_ids)) {
      // Product is already in cart! We only want to allow a quantity of 1,
      // so disable the submit button and change its text accordingly
      $form['submit']['#disabled'] = TRUE;
      $form['submit']['#value'] = t('Already in cart');
    }

    if (in_array($product->product_id, $purchased_product_ids)) {
      // Product has already been purchased!
      // We only want users to register for a program once
      $form['submit']['#disabled'] = TRUE;
      $form['submit']['#value'] = t('Already enrolled');
    }
  }
  */
}

/**
 * Return the product_id values for all products in the cart
 *
 * @return
 *  An array of product ids
 */
function vih_short_course_commerce_get_products_in_cart() {
  $cart_product_ids = &drupal_static(__FUNCTION__);

  if (!isset($cart_product_ids)) {
    global $user;
    $cart_product_ids = array();
    $order = commerce_cart_order_load($user->uid);
    if ($order) {
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
      foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
        $product_wrapper = $line_item_wrapper->commerce_product;
        $cart_product_ids[] = $product_wrapper->product_id->value();
      }
    }

    $cart_product_ids = array_unique($cart_product_ids);
  }

  return $cart_product_ids;
}

/**
 * Return the product_id values for all products already purchased
 *
 * @return
 *  An array of product ids
 */
function vih_short_course_commerce_get_users_purchased_products() {
  $purchased_product_ids = &drupal_static(__FUNCTION__);

  if (!isset($purchased_product_ids)) {
    global $user;
    $query = db_select('commerce_order', 'corder');
    $query->join('commerce_line_item', 'li', 'corder.order_id = li.order_id');
    $query->join('field_data_commerce_product', 'prod', 'li.line_item_id = prod.entity_id');
    $query->condition('corder.uid', $user->uid, '=')
          ->condition('corder.status', 'completed', '=')
          ->fields('prod', array('commerce_product_product_id'));
    $result = $query->execute();

    $purchased_product_ids = array_unique($result->fetchCol());
  }

  return $purchased_product_ids;
}
