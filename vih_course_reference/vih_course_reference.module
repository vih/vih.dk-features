<?php

/**
 * @file
 * Defines a field type for referencing courses to a subject group
 * bound to a period with some special flags.
 */

/**
 * Implements hook_field_info().
 */
function vih_course_reference_field_info() {
  return array(
    'vih_course_reference' => array(
      'label'             => t('VIH course reference'),
      'description'       => t('This field stores a three-way relation between courses, subject groups and periods.'),
      'default_formatter' => 'vih_course_reference_formatter',
      'default_widget'    => 'vih_course_reference_select',
    ),
  );
}

/**
 * Implements hook_field_schema().
 */
function vih_course_reference_field_schema($field) {
  $columns = array(
    'period_nid' => array(
      'type'     => 'int',
      'unsigned' => TRUE,
      'not null' => FALSE,
    ),
    'subject_group_nid' => array(
      'type'     => 'int',
      'unsigned' => TRUE,
      'not null' => FALSE,
    ),
    'signup_enabled' => array(
      'type' => 'int',
      'unsigned' => TRUE,
      'size' => 'tiny',
      'not null' => TRUE,
      'default' => 0,
    ),
  );
  return array(
    'columns' => $columns,
    'indexes' => array('period_nid' => array('period_nid')),
    'foreign keys' => array(
      'period_nid' => array(
        'table' => 'node',
        'columns' => array('period_nid' => 'nid'),
      ),
      'subject_group_nid' => array(
        'table' => 'node',
        'columns' => array('subject_group_nid' => 'nid'),
      ),
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function vih_course_reference_field_is_empty($item, $field) {
  // nid = 0 is empty too, which is exactly what we want.
  return empty($item['period_nid']) || empty($item['subject_group_nid']);
}

/**
 * Implements hook_field_formatter_info().
 */
function vih_course_reference_field_formatter_info() {
  $ret = array(
    'vih_course_reference_formatter' => array(
      'label'       => t('Subject/period groups.'),
      'description' => t('Display the subject groups, grouped by period.'),
      'field types' => array('vih_course_reference'),
    ),
  );
  return $ret;
}

/**
 * Implements hook_field_widget_info().
 */
function vih_course_reference_field_widget_info() {
  return array(
    'vih_course_reference_select' => array(
      'label'       => t('Selection widget'),
      'description' => t('Enables the user to set the options for a course reference.'),
      'field types' => array('vih_course_reference'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function vih_course_reference_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'vih_course_reference_select':
      $element['period_nid'] = array(
        '#type' => 'select',
        '#title' => t('Period'),
        '#options' => vih_course_reference_get_periods(),
      );

      $element['subject_group_nid'] = array(
        '#type' => 'select',
        '#title' => t('Subject group'),
        '#options' => vih_course_reference_get_subject_groups(),
      );

      $element['signup_enabled'] = array(
        '#type' => 'checkbox',
        '#title' => t('Signup enabled?'),
      );

      // Get the values for the current widget.
      $values = (isset($items[$delta])) ? $items[$delta] : array();

      // If available, assign the value from the array to our elements.
      foreach ($values as $key => $value) {
        // Check that the element exists before setting a value for it.
        if (isset($element[$key]) && is_array($element[$key])) {
          $element[$key]['#default_value'] = $value;
        }
      }

      break;
  }

  return $element;
}

/**
 * Get available subject groups.
 *
 * @return
 *   Array of subject group node names, keyed by nid. Suitable for
 *   select forms.
 */
function vih_course_reference_get_periods() {
  $nodes = node_load_multiple(array(), array(
    'status' => 1,
    'type' => 'course_period',
  ));

  $periods = array();
  foreach ($nodes as $node) {
    $periods[$node->nid] = $node->title;
  }

  return $periods;
}

/**
 * Get available subject groups.
 *
 * @return
 *   Array of subject group node names, keyed by nid. Suitable for
 *   select forms.
 */
function vih_course_reference_get_subject_groups() {
  $nodes = node_load_multiple(array(), array(
    'status' => 1,
    'type' => 'course_subject_group',
  ));

  $groups = array('' => t('Choose subject group'));
  foreach ($nodes as $node) {
    $groups[$node->nid] = $node->title;
  }

  return $groups;
}

